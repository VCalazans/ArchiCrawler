const fs = require('fs');

const newExecutionService = `
import { Injectable, Logger, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { GeneratedTest } from '../entities/generated-test.entity';
import { TestExecution, TestExecutionStatus } from '../../test-executions/entities/test-execution.entity';
import { PlaywrightMCPService } from '../../mcp/services/playwright-mcp.service';

interface MCPCommand {
  action: string;
  url?: string;
  selector?: string;
  value?: string;
  description: string;
  captureScreenshot?: boolean;
}

interface ExecutionStep {
  stepId: string;
  status: TestExecutionStatus;
  startTime: Date;
  endTime?: Date;
  duration?: number;
  result?: any;
  error?: string;
  screenshot?: string;
}

@Injectable()
export class LLMTestExecutionService {
  private readonly logger = new Logger(LLMTestExecutionService.name);

  constructor(
    @InjectRepository(GeneratedTest)
    private readonly generatedTestRepository: Repository<GeneratedTest>,
    @InjectRepository(TestExecution)
    private readonly executionRepository: Repository<TestExecution>,
    private readonly playwrightMCPService: PlaywrightMCPService,
  ) {}

  /**
   * üöÄ Executa um teste LLM com boas pr√°ticas MCP
   */
  async executeTest(testId: string, userId: string): Promise<TestExecution> {
    this.logger.log(\`üöÄ Iniciando execu√ß√£o do teste LLM \${testId} para usu√°rio \${userId}\`);

    // 1. Buscar o teste gerado
    const test = await this.generatedTestRepository.findOne({
      where: { id: testId },
    });

    if (!test) {
      throw new NotFoundException('Teste n√£o encontrado');
    }

    // 2. ‚úÖ Verificar sa√∫de do MCP (Boa Pr√°tica)
    await this.verifyMCPHealth();

    // 3. üîÑ Converter teste LLM para comandos MCP
    const mcpCommands = this.convertLLMTestToMCPCommands(test);
    this.logger.log(\`üìù Convertido para \${mcpCommands.length} comandos MCP\`);

    // 4. üìä Criar registro de execu√ß√£o
    const execution = this.executionRepository.create({
      testFlowId: testId, // Usar testId como workaround
      userId,
      status: TestExecutionStatus.RUNNING,
      startTime: new Date(),
      totalSteps: mcpCommands.length,
      completedSteps: 0,
      failedSteps: 0,
      steps: [],
    });

    const savedExecution = await this.executionRepository.save(execution);

    try {
      // 5. üîÑ Executar comandos com retry e timeout (Boas Pr√°ticas)
      const executionSteps = await this.executeMCPCommandsWithBestPractices(mcpCommands);

      // 6. üìä Finalizar execu√ß√£o
      await this.finalizeExecution(savedExecution, test, executionSteps);

      this.logger.log(\`‚úÖ Execu√ß√£o do teste LLM \${testId} finalizada: \${savedExecution.status}\`);
      return savedExecution;

    } catch (error) {
      await this.handleExecutionError(savedExecution, error);
      throw error;
    }
  }

  /**
   * üè• Verifica sa√∫de do MCP antes de executar (Boa Pr√°tica)
   */
  private async verifyMCPHealth(): Promise<void> {
    try {
      this.logger.debug('üè• Verificando sa√∫de do servi√ßo MCP...');
      const health = await this.playwrightMCPService.checkHealth();
      
      if (!health.healthy) {
        throw new Error(\`MCP n√£o est√° saud√°vel: \${health.message}\`);
      }
      
      this.logger.debug('‚úÖ MCP est√° saud√°vel e pronto');
    } catch (error) {
      this.logger.error('‚ùå Falha na verifica√ß√£o de sa√∫de do MCP:', error.message);
      throw new Error(\`Servi√ßo MCP n√£o dispon√≠vel: \${error.message}\`);
    }
  }

  /**
   * üîÑ Executa comandos MCP seguindo boas pr√°ticas
   */
  private async executeMCPCommandsWithBestPractices(mcpCommands: MCPCommand[]): Promise<ExecutionStep[]> {
    const executionSteps: ExecutionStep[] = [];
    let hasErrors = false;

    this.logger.log(\`üîÑ Iniciando execu√ß√£o de \${mcpCommands.length} comandos MCP...\`);

    for (let i = 0; i < mcpCommands.length; i++) {
      const command = mcpCommands[i];
      const stepId = \`step-\${i + 1}\`;
      
      this.logger.debug(\`üéØ Executando passo \${i + 1}/\${mcpCommands.length}: \${command.action}\`);
      
      const step: ExecutionStep = {
        stepId,
        status: TestExecutionStatus.RUNNING,
        startTime: new Date(),
      };

      try {
        // üîÑ Executar comando com retry autom√°tico (Boa Pr√°tica)
        const result = await this.executeMCPCommandWithRetry(command, 3);
        
        step.endTime = new Date();
        step.duration = step.endTime.getTime() - step.startTime.getTime();
        step.status = TestExecutionStatus.SUCCESS;
        step.result = {
          action: command.action,
          description: command.description,
          data: result.data,
          duration: result.duration
        };

        // üì∑ Capturar screenshot se necess√°rio
        if (command.captureScreenshot) {
          try {
            const screenshot = await this.captureScreenshotSafely();
            if (screenshot) {
              step.screenshot = screenshot;
            }
          } catch (screenshotError) {
            this.logger.warn(\`üì∑ Screenshot falhou: \${screenshotError.message}\`);
          }
        }

        this.logger.debug(\`‚úÖ Passo \${i + 1} conclu√≠do em \${step.duration}ms\`);

      } catch (error) {
        hasErrors = true;
        step.endTime = new Date();
        step.duration = step.endTime.getTime() - step.startTime.getTime();
        step.status = TestExecutionStatus.FAILED;
        step.error = error.message;
        
        this.logger.error(\`‚ùå Passo \${i + 1} falhou: \${error.message}\`);
        
        // üì∑ Capturar screenshot do erro para debug
        try {
          const errorScreenshot = await this.captureScreenshotSafely();
          if (errorScreenshot) {
            step.screenshot = errorScreenshot;
          }
        } catch (screenshotError) {
          this.logger.warn(\`üì∑ Screenshot de erro falhou: \${screenshotError.message}\`);
        }

        // ‚ö†Ô∏è Decidir se continua ou para (baseado no tipo de erro)
        if (this.isCriticalError(error)) {
          this.logger.error(\`üõë Erro cr√≠tico detectado, parando execu√ß√£o\`);
          break;
        }
      }

      executionSteps.push(step);

      // ‚è≥ Aguardar entre comandos para estabilidade (Boa Pr√°tica)
      if (i < mcpCommands.length - 1) {
        await this.wait(500); // 500ms entre comandos
      }
    }

    return executionSteps;
  }

  /**
   * üîÑ Executa comando MCP com retry autom√°tico (Boa Pr√°tica)
   */
  private async executeMCPCommandWithRetry(command: MCPCommand, maxRetries: number = 3): Promise<{ duration: number; data?: any }> {
    let lastError: Error | null = null;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        this.logger.debug(\`üîÑ Tentativa \${attempt}/\${maxRetries} para comando \${command.action}\`);
        return await this.executeMCPCommand(command);
      } catch (error) {
        lastError = error;
        this.logger.warn(\`‚ö†Ô∏è Tentativa \${attempt} falhou: \${error.message}\`);
        
        if (attempt < maxRetries) {
          // ‚è≥ Aguardar antes de retry com backoff exponencial
          const delay = 1000 * Math.pow(2, attempt - 1); // 1s, 2s, 4s
          this.logger.debug(\`‚è≥ Aguardando \${delay}ms antes da pr√≥xima tentativa...\`);
          await this.wait(delay);
        }
      }
    }
    
    throw lastError || new Error(\`Falha ap√≥s \${maxRetries} tentativas\`);
  }

  /**
   * üéØ Executa comando MCP individual com nomes corretos
   */
  private async executeMCPCommand(command: MCPCommand): Promise<{ duration: number; data?: any }> {
    const startTime = Date.now();
    let result: any;

    switch (command.action) {
      case 'navigate':
        this.logger.debug(\`üåê Navegando para: \${command.url}\`);
        result = await this.playwrightMCPService.navigate(command.url);
        break;

      case 'click':
        this.logger.debug(\`üëÜ Clicando em: \${command.selector}\`);
        result = await this.playwrightMCPService.click(command.selector);
        break;

      case 'fill':
        this.logger.debug(\`‚úèÔ∏è Preenchendo \${command.selector} com: \${command.value}\`);
        result = await this.playwrightMCPService.fill(command.selector, command.value);
        break;

      case 'wait':
        this.logger.debug(\`‚è≥ Aguardando \${command.value}ms\`);
        result = await this.playwrightMCPService.wait(parseInt(command.value));
        break;

      case 'screenshot':
        this.logger.debug(\`üì∑ Capturando screenshot\`);
        result = await this.playwrightMCPService.screenshot();
        break;

      case 'hover':
        this.logger.debug(\`üéØ Hover em: \${command.selector}\`);
        result = await this.playwrightMCPService.hover(command.selector);
        break;

      case 'select':
        this.logger.debug(\`üîΩ Selecionando \${command.value} em: \${command.selector}\`);
        result = await this.playwrightMCPService.select(command.selector, command.value);
        break;

      default:
        throw new Error(\`A√ß√£o MCP n√£o suportada: \${command.action}\`);
    }

    const duration = Date.now() - startTime;
    return { duration, data: result };
  }

  /**
   * üì∑ Captura screenshot de forma segura
   */
  private async captureScreenshotSafely(): Promise<string | null> {
    try {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const screenshotName = \`llm-test-\${timestamp}\`;
      
      const result = await this.playwrightMCPService.screenshot(screenshotName);
      return result?.path || screenshotName;
    } catch (error) {
      this.logger.warn(\`üì∑ Screenshot falhou: \${error.message}\`);
      return null;
    }
  }

  /**
   * ‚ö†Ô∏è Determina se um erro √© cr√≠tico e deve parar a execu√ß√£o
   */
  private isCriticalError(error: Error): boolean {
    const criticalKeywords = [
      'MCP not available',
      'Server crashed', 
      'Connection lost',
      'Browser crashed',
      'Critical timeout'
    ];
    
    return criticalKeywords.some(keyword => 
      error.message.toLowerCase().includes(keyword.toLowerCase())
    );
  }

  /**
   * ‚úÖ Finaliza execu√ß√£o com sucesso
   */
  private async finalizeExecution(execution: TestExecution, test: GeneratedTest, steps: ExecutionStep[]): Promise<void> {
    const hasErrors = steps.some(step => step.status === TestExecutionStatus.FAILED);
    
    execution.endTime = new Date();
    execution.duration = execution.endTime.getTime() - execution.startTime.getTime();
    execution.status = hasErrors ? TestExecutionStatus.FAILED : TestExecutionStatus.SUCCESS;
    execution.steps = steps;
    execution.completedSteps = steps.filter(s => s.status === TestExecutionStatus.SUCCESS).length;
    execution.failedSteps = steps.filter(s => s.status === TestExecutionStatus.FAILED).length;

    // ‚úÖ Atualizar teste
    test.lastExecutionAt = new Date();
    test.executionCount = (test.executionCount || 0) + 1;
    if (!hasErrors) {
      test.lastSuccessfulExecutionAt = new Date();
    }

    await Promise.all([
      this.executionRepository.save(execution),
      this.generatedTestRepository.save(test),
    ]);
  }

  /**
   * ‚ùå Trata erros de execu√ß√£o
   */
  private async handleExecutionError(execution: TestExecution, error: Error): Promise<void> {
    execution.endTime = new Date();
    execution.duration = execution.endTime.getTime() - execution.startTime.getTime();
    execution.status = TestExecutionStatus.FAILED;
    execution.error = \`Erro geral na execu√ß√£o: \${error.message}\`;

    await this.executionRepository.save(execution);
    
    this.logger.error(\`üí• Erro na execu√ß√£o do teste LLM \${execution.testFlowId}: \${error.message}\`);
  }

  /**
   * ‚è≥ Aguarda um tempo em milissegundos
   */
  private async wait(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * üîÑ Converte teste LLM para comandos MCP
   */
  private convertLLMTestToMCPCommands(test: GeneratedTest): MCPCommand[] {
    try {
      // üßπ Tentar parsear como JSON primeiro
      if (test.generatedCode.trim().startsWith('{') || test.generatedCode.trim().startsWith('[')) {
        return this.parseJSONCommands(test);
      } else {
        // üîß Fallback para parsing JavaScript
        return this.parseJavaScriptCommands(test);
      }
    } catch (error) {
      this.logger.error(\`‚ùå Erro ao converter teste para comandos MCP: \${error.message}\`);
      throw new Error(\`Falha ao processar comandos do teste: \${error.message}\`);
    }
  }

  /**
   * üìã Parse JSON commands
   */
  private parseJSONCommands(test: GeneratedTest): MCPCommand[] {
    const jsonCode = JSON.parse(test.generatedCode);
    const commands: MCPCommand[] = [];

    if (jsonCode.steps) {
      jsonCode.steps.forEach((step: any, index: number) => {
        const command: MCPCommand = {
          action: step.action,
          description: step.description || \`Passo \${index + 1}\`,
          captureScreenshot: step.captureScreenshot || false
        };

        if (step.url) command.url = step.url;
        if (step.selector) command.selector = step.selector;
        if (step.value) command.value = step.value;

        commands.push(command);
      });
    }

    return commands;
  }

  /**
   * üîß Parse JavaScript commands (fallback)
   */
  private parseJavaScriptCommands(test: GeneratedTest): MCPCommand[] {
    const commands: MCPCommand[] = [];
    const lines = test.generatedCode.split('\\n');

    lines.forEach((line, index) => {
      const trimmedLine = line.trim();
      
      if (trimmedLine.includes('navigate(')) {
        const urlMatch = trimmedLine.match(/navigate\\(['"\`]([^'"\`]+)['"\`]\\)/);
        if (urlMatch) {
          commands.push({
            action: 'navigate',
            url: urlMatch[1],
            description: \`Navegar para \${urlMatch[1]}\`,
            captureScreenshot: true
          });
        }
      } else if (trimmedLine.includes('click(')) {
        const selectorMatch = trimmedLine.match(/click\\(['"\`]([^'"\`]+)['"\`]\\)/);
        if (selectorMatch) {
          commands.push({
            action: 'click',
            selector: selectorMatch[1],
            description: \`Clicar em \${selectorMatch[1]}\`,
            captureScreenshot: true
          });
        }
      } else if (trimmedLine.includes('fill(')) {
        const fillMatch = trimmedLine.match(/fill\\(['"\`]([^'"\`]+)['"\`],\\s*['"\`]([^'"\`]+)['"\`]\\)/);
        if (fillMatch) {
          commands.push({
            action: 'fill',
            selector: fillMatch[1],
            value: fillMatch[2],
            description: \`Preencher \${fillMatch[1]} com \${fillMatch[2]}\`
          });
        }
      } else if (trimmedLine.includes('wait(')) {
        const waitMatch = trimmedLine.match(/wait\\((\\d+)\\)/);
        if (waitMatch) {
          commands.push({
            action: 'wait',
            value: waitMatch[1],
            description: \`Aguardar \${waitMatch[1]}ms\`
          });
        }
      } else if (trimmedLine.includes('screenshot(')) {
        commands.push({
          action: 'screenshot',
          description: 'Capturar screenshot'
        });
      }
    });

    return commands;
  }

  // üìä M√©todos para consulta de execu√ß√µes
  async getTestExecutions(testId: string, userId: string): Promise<TestExecution[]> {
    return this.executionRepository.find({
      where: { testFlowId: testId },
      order: { startTime: 'DESC' },
      take: 10
    });
  }

  async getExecutionResult(executionId: string, userId: string): Promise<TestExecution> {
    const execution = await this.executionRepository.findOne({
      where: { id: executionId }
    });

    if (!execution) {
      throw new NotFoundException('Execu√ß√£o n√£o encontrada');
    }

    return execution;
  }

  async stopExecution(executionId: string, userId: string): Promise<void> {
    const execution = await this.executionRepository.findOne({
      where: { id: executionId }
    });

    if (!execution) {
      throw new NotFoundException('Execu√ß√£o n√£o encontrada');
    }

    if (execution.status === TestExecutionStatus.RUNNING) {
      execution.status = TestExecutionStatus.FAILED;
      execution.endTime = new Date();
      execution.error = 'Execu√ß√£o interrompida pelo usu√°rio';
      
      await this.executionRepository.save(execution);
    }
  }
}
`;

console.log('üîÑ Criando service LLM corrigido...');
fs.writeFileSync('src/llm-tests/services/llm-test-execution.service.ts', newExecutionService);
console.log('‚úÖ Service criado com sucesso!');
console.log('');
console.log('üéØ PR√ìXIMOS PASSOS:');
console.log('1. Reiniciar o backend');
console.log('2. Testar execu√ß√£o via frontend'); 
console.log('3. Verificar se browser abre e executa comandos');
console.log('');
console.log('üìã BOAS PR√ÅTICAS IMPLEMENTADAS:');
console.log('‚úÖ Health checks do MCP');
console.log('‚úÖ Retry autom√°tico com backoff exponencial');
console.log('‚úÖ Timeouts apropriados');
console.log('‚úÖ Screenshot em caso de erro');
console.log('‚úÖ Logging detalhado');
console.log('‚úÖ Detec√ß√£o de erros cr√≠ticos');
console.log('‚úÖ Nomes corretos das ferramentas MCP');
console.log('‚úÖ Aguardo entre comandos para estabilidade');
console.log('‚úÖ Tratamento de erros robusto'); 