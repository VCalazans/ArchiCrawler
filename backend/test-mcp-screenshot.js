const { MCPManagerService } = require('./dist/src/mcp/mcp-manager.service');

async function testMCPScreenshot() {
  try {
    console.log('üì∏ TESTE DIRETO MCP SCREENSHOT');
    console.log('=============================\n');

    // Simular o MCPManagerService para teste
    console.log('üîó Inicializando MCP Manager...');
    
    // Teste direto via linha de comando (simulando MCP)
    const spawn = require('child_process').spawn;
    
    console.log('üé≠ Testando navega√ß√£o...');
    console.log('üåê Navegando para https://example.com');
    
    console.log('üì∏ Capturando screenshot...');
    
    // Criar diret√≥rio se n√£o existir
    const fs = require('fs');
    const screenshotDir = 'D:\\GIT\\ArchiCrawler\\screenshots';
    
    if (!fs.existsSync(screenshotDir)) {
      fs.mkdirSync(screenshotDir, { recursive: true });
      console.log(`üìÅ Diret√≥rio criado: ${screenshotDir}`);
    }
    
    // Aguardar um pouco para simular o processamento
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('‚úÖ Teste MCP simulado conclu√≠do');
    console.log('\nüìã OP√á√ïES PARA RESOLVER O PROBLEMA:');
    console.log('1. Verificar par√¢metros corretos do MCP Playwright');
    console.log('2. Testar screenshot diretamente via MCP tools');
    console.log('3. Verificar logs do servidor MCP');
    console.log('4. Usar diret√≥rio padr√£o do sistema (Downloads)');
    
    console.log('\nüîç INVESTIGA√á√ÉO NECESS√ÅRIA:');
    console.log('- Quais par√¢metros o MCP playwright_screenshot aceita?');
    console.log('- Onde o MCP salva os screenshots por padr√£o?');
    console.log('- O par√¢metro downloadsDir √© suportado?');

  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  }
}

testMCPScreenshot(); 