import { ScraperEngine } from '../../interfaces/scraper-engine.interface';
import { ScraperOptions } from '../../interfaces/scraper-options.interface';
export declare class PuppeteerEngine implements ScraperEngine {
    private browser;
    private page;
    private options;
    private networkRequests;
    constructor(options?: ScraperOptions);
    initialize(): Promise<void>;
    navigate(url: string): Promise<void>;
    wait(milliseconds: number): Promise<void>;
    waitForSelector(selector: string, options?: any): Promise<void>;
    waitForLoadState(state?: 'load' | 'domcontentloaded' | 'networkidle'): Promise<void>;
    getText(selector: string): Promise<string[]>;
    getAttribute(selector: string, attributeName: string): Promise<string[]>;
    getProperty(selector: string, propertyName: string): Promise<any[]>;
    getElementData(selector: string, options?: any): Promise<any[]>;
    elementExists(selector: string): Promise<boolean>;
    isVisible(selector: string): Promise<boolean>;
    private ensurePage;
    screenshot(options?: any): Promise<Buffer>;
    pdf(options?: any): Promise<Buffer>;
    evaluate<T>(script: string | Function): Promise<T>;
    click(selector: string, options?: any): Promise<void>;
    doubleClick(selector: string, options?: any): Promise<void>;
    rightClick(selector: string, options?: any): Promise<void>;
    hover(selector: string): Promise<void>;
    type(selector: string, text: string, options?: any): Promise<void>;
    fill(selector: string, value: string): Promise<void>;
    clear(selector: string): Promise<void>;
    selectOption(selector: string, value: string | string[]): Promise<void>;
    setChecked(selector: string, checked: boolean): Promise<void>;
    uploadFiles(selector: string, files: string[] | Buffer[]): Promise<void>;
    press(key: string): Promise<void>;
    scroll(options?: any): Promise<void>;
    getCurrentUrl(): Promise<string>;
    getTitle(): Promise<string>;
    goBack(): Promise<void>;
    goForward(): Promise<void>;
    reload(): Promise<void>;
    setViewport(width: number, height: number): Promise<void>;
    addCookies(cookies: any[]): Promise<void>;
    getCookies(): Promise<any[]>;
    clearCookies(): Promise<void>;
    setGeolocation(latitude: number, longitude: number): Promise<void>;
    blockResources(resourceTypes: string[]): Promise<void>;
    interceptRequests(callback: (request: any) => Promise<void>): Promise<void>;
    getNetworkRequests(): Promise<any[]>;
    emulateDevice(device: string | any): Promise<void>;
    setUserAgent(userAgent: string): Promise<void>;
    close(): Promise<void>;
}
